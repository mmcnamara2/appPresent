summary(fit)
coef(fit)
pvalue(fit)
pval(fit)
fit
sig(fit)
cor(mtcars$mpg,mtcars$cyl)
cor(mtcars$mpg,mtcars$wt)
cor(mtcars$mpg,mtcars$disp)
cor(mtcars$mpg,mtcars$hp)
cor(mtcars$mpg,mtcars$drat)
cor(mtcars$mpg,mtcars$qsec)
cor(mtcars$mpg,mtcars$vs)
cor(mtcars$mpg,mtcars$am)
cor(mtcars$mpg,mtcars$gear)
cor(mtcars$mpg,mtcars$carb)
plot(mtcars$wt,mtcars$mpg,col=ifelse(mtcars$am==0,"red","blue"),xlab="Weight",ylab="MPG")
legend("topleft",col=C("red","blue"),)
legend("topleft")
legend(5,30,c("Automatic","Manual"),col=c("red","blue"))
legend(4,30,c("Automatic","Manual"),col=c("red","blue"))
plot(mtcars$wt,mtcars$mpg,col=ifelse(mtcars$am==0,"red","blue"),xlab="Weight",ylab="MPG")
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"))
plot(mtcars$wt,mtcars$mpg,col=ifelse(mtcars$am==0,"red","blue"),xlab="Weight",ylab="MPG")
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(1,1))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(2,2))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(3,3))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(4,4))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(5,5))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(5,9))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(5,19))
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),lty=c(5,13))
plot(mtcars$wt,mtcars$mpg,col=ifelse(mtcars$am==0,"red","blue"),xlab="Weight",ylab="MPG")
?legend
legend(3.5,30,c("Automatic","Manual"),col=c("red","blue"),pch=c(1,1))
plot(mtcars$wt,mtcars$mpg,col=ifelse(mtcars$am==0,"red","blue"),xlab="Weight",ylab="MPG")
legend(4,30,c("Automatic","Manual"),col=c("red","blue"),pch=c(1,1))
fit <- lm(mpg~as.factor(am),data=mtcars)
summary(fit)
fit <- lm(mpg~as.factor(am)-1,data=mtcars)
summary(fit)
fit <- lm(mpg~as.factor(am),data=mtcars)
summary(fit)
coef(fit)
coef(fit)
round(coef(fit),2)
fit2 <- lm(mpg~as.factor(am)+wt,data=mtcars)
summary(fit)
summary(fit2)
round(coef(fit2),2)
data(mtcars)
fit <- lm(mpg~wt,data=mtcars)
summary(fit)
fit <- lm(mpg~wt+hp,data=mtcars)
summary(fit)
fit <- lm(mpg~hp,data=mtcars)
summary(fit)
?read.table
file_name <- "\\CSIADDFS01\SyndicatedOps\MMX\mmcnamara\cpp_data_176.txt"
file_name <- "\\\\CSIADDFS01\\SyndicatedOps\\MMX\\mmcnamara\\cpp_data_176.txt"
file_name
class(176)
class("mmmm")
col_classes <- c("numeric","numeric","numeric","numeric","factor","numeric","numeric","numeric","numeric")
cpp_data <- read.table(file=file_name, header=T,sep=";",colClasses=col_classes,nrows=10)
cpp_data
class(cpp_data$location_id)
cpp_data <- read.table(file=file_name, header=T,sep=";",colClasses=col_classes)
summary(cpp_data$raw_cookies)
hist(cpp_data$raw_cookies)
plot(cpp_data$raw_cookies)
head(cpp_data)
remove(cpp_data)
head(cpp_data)
file_name <- "\\\\CSIADDFS01\\SyndicatedOps\\MMX\\mmcnamara\\cpp_data2_176.txt"
col_classes <- c("numeric","numeric","numeric","numeric","factor","numeric","numeric","numeric","numeric","numeric","numeric","factor")
cpp_data <- read.table(file=file_name, header=T,sep=";",colClasses=col_classes)
head(cpp_data)
summary(cpp_data$percent_proj)
summary(cpp_data$raw_cookies)
mean(cpp_data$percent_proj)
class(cpp_data$percent_proj)
head(cpp_data)
col_classes <- c("numeric","numeric","numeric","numeric","factor","numeric","numeric","numeric","numeric","numeric","numeric","numeric","factor")
remove(cpp_data)
cpp_data <- read.table(file=file_name, header=T,sep=";",colClasses=col_classes)
summary(cpp_data$percent_proj)
library(psych)
install.packages(psych)
install.packages("psych")
library(psych)
describe.by(cpp_data$percent_proj,cpp_data$size_flag)
describeBy(cpp_data$percent_proj,cpp_data$size_flag)
?subset
hist(subset(cpp_data,size_flag == 4,percent_proj)
)
size_test <- subset(cpp_data,size_flag == 4,select = percent_proj)
head(size_test)
class(size_test)
class(size_test[1])
class(size_test$percent_proj)
hist(size_test$percent_proj)
mean_4 <- mean(subset(cpp_data,size_flag == 4,select = percent_proj))
mean_4 <- mean(subset(cpp_data,size_flag == 4,select = percent_proj)$percent_proj)
mean_4
sd_4 <- sd(subset(cpp_data,size_flag == 4,select = percent_proj)$percent_proj)
sd_4
sd_4*2
+ mean_4
mean_4 + (sd_4*2)
test <- 1:100
test
?quantiles
?quartile
?quantile
quantile(test)
quantile(test,probs=seq(.5,.75,.9,.97,.99))
quantile(test,probs=seq(.5,.75,.9,.97,.99))
seq(0,1,.25)
quantile(test,probs=c(.5,.75,.9,.97,.99))
quantile(size_test$percent_proj,probs=c(.5,.75,.9,.97,.99))
size_test2 <- subset(cpp_data,size_flag == 2,select = percent_proj)
size_test3 <- subset(cpp_data,size_flag == 3,select = percent_proj)
size_test4 <- subset(cpp_data,size_flag == 4,select = percent_proj)
quantile(size_test2$percent_proj,probs=c(.5,.75,.9,.97,.99))
quantile(size_test3$percent_proj,probs=c(.5,.75,.9,.97,.99))
mean(size_test3$percent_proj) + (sd(size_test3$percent_proj)*2)
mean(size_test2$percent_proj) + (sd(size_test2$percent_proj)*2)
mean(size_test2$percent_proj) + (sd(size_test2$percent_proj)*6)
mean(size_test3$percent_proj) + (sd(size_test3$percent_proj)*6)
head(cpp_data)
cpp_data$percent_proj_100 <- percent_proj*100
cpp_data$percent_proj_100 <- cpp_data$percent_proj*100
head(cpp_data)
size_test4 <- subset(cpp_data,size_flag == 4,select = percent_proj_100)
size_test3 <- subset(cpp_data,size_flag == 3,select = percent_proj_100)
size_test2 <- subset(cpp_data,size_flag == 2,select = percent_proj_100)
size_test1 <- subset(cpp_data,size_flag == 1,select = percent_proj_100)
mean(size_test3$percent_proj_100) + (sd(size_test3$percent_proj_100)*6)
mean(size_test4$percent_proj_100) + (sd(size_test4$percent_proj_100)*6)
mean(size_test2$percent_proj_100) + (sd(size_test2$percent_proj_100)*6)
mean(size_test1$percent_proj_100) + (sd(size_test1$percent_proj_100)*6)
max(size_test4$percent_proj_100)
max(size_test3$percent_proj_100)
max(size_test2$percent_proj_100)
boxplot(percent_proj_100~size_flag,data=cpp_data)
?tapply
mean(size_test1$percent_proj_100)
mean(size_test2$percent_proj_100)
mean(size_test3$percent_proj_100)
mean(size_test4$percent_proj_100)
mean(size_test1$percent_proj_100) + (sd(size_test1$percent_proj_100)*6)
mean(size_test2$percent_proj_100) + (sd(size_test2$percent_proj_100)*6)
mean(size_test3$percent_proj_100) + (sd(size_test3$percent_proj_100)*6)
mean(size_test4$percent_proj_100) + (sd(size_test4$percent_proj_100)*6)
head(cpp_data)
mean(cpp_data$projected_cookies)
summary(cpp_data$projected_cookies)
mean(cpp_data$projected_cookies) + (sd(cpp_data$projected_cookies)*6)
mean(cpp_data$raw_cookies)
summary(cpp_data$raw_cookies)
hist(cpp_data$raw_cookies)
?hist
hist(cpp_data$raw_cookies,breaks = c(1,2,3,4,5,6:10,10:20,20:50,50:200))
hist(cpp_data$raw_cookies,breaks = c(0,1,2,3,4,5,6:10,10:20,20:50,50:200))
hist(cpp_data$raw_cookies)
hist(cpp_data$raw_cookies,xlim=10)
hist(cpp_data$raw_cookies,xlim=200)
hist(cpp_data$raw_cookies,xlim=200,ylim=200)
mean(cpp_data$raw_cookies)
sd(cpp_data$raw_cookies)
mean(cpp_data$raw_cookies) + (sd(cpp_data$raw_cookies)*2)
mean(cpp_data$raw_cookies) + (sd(cpp_data$raw_cookies)*6)
mean(cpp_data$raw_cookies) + (sd(cpp_data$raw_cookies)*7)
source('~/.active-rstudio-document')
myfunc(2)
?tapply
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = MEAN)
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = mean)
source('~/.active-rstudio-document')
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = myfunc)
source('~/.active-rstudio-document')
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = myfunc)
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = mean)
source('~/.active-rstudio-document')
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = myfunc)
source('~/.active-rstudio-document')
tapply(cpp_data$raw_cookies,cpp_data$size_flag,FUN = myfunc)
brand(1)
?birand
bnorm
?bnorm
?rnorm
?rbin
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
?rbinom
rbinom(1)
rbinom(1,1)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,3,.5)
rbinom(1,3,.5)
rbinom(1,3,.5)
rbinom(1,3,.5)
rbinom(1,3,.5)
rbinom(1,3,.5)
rbinom(3,1,.5)
rbinom(1,1,.339)
mean(rbinom(100,1,.339))
mean(rbinom(1000,1,.339))
mean(rbinom(10000,1,.339))
mean(rbinom(1,1,.339))
rbinom(1,1,.294)
rbinom(1,1,.334)
rbinom(1,1,.145)
rbinom(1,1,.275)
rbinom(1,1,.298)
rbinom(1,1,.116)
rbinom(1,1,.18)
rbinom(1,1,.377)
rbinom(1,1,.2525)
rbinom(1,1,.339)
clear
rbinom(1,1,..2943)
rbinom(1,1,.2943)
rbinom(1,1,.3348)
rbinom(1,1,.1458)
rbinom(1,1,.275)
rbinom(1,1,.2985)
rbinom(1,1,.1168)
rbinom(1,1,.18333)
rbinom(1,1,.377897)
rbinom(1,1,.2525)
4!
?factorial
factorial(4)
1*2*3*4
library(mass)
library(MASS)
data(shuttle)
head(shuttle)
nrow(shuttle)
shuttle$use
head(shuttle)
my_shuttle <- shuttle
my_shuttle$useBin <- if(myshuttle == "auto") 1 else 0
my_shuttle$useBin <- if(my_shuttle == "auto") 1 else 0
my_shuttle$use == "auto"
int(my_shuttle$use == "auto")
numeric(my_shuttle$use == "auto")
?numeric
as.numeric(my_shuttle$use == "auto")
my_shuttle$useBin <- as.numeric(my_shuttle$use == "auto")
my_shuttle$useBin
mylogit <- glm(useBin ~ wind,data=my_shuttle,family="binomial")
summary(mylogit)
head(my_shuttle)
class(my_shuttle$wind)
mylogit <- glm(useBin ~ wind + magn,data=my_shuttle,family="binomial")
summary(mylogit)
class(my_shuttle$magn)
mylogit <- glm(useBin ~ wind,data=my_shuttle,family="binomial")
exp(coef(mylogit))
mylogit <- glm(useBin ~ wind + magn,data=my_shuttle,family="binomial")
exp(coef(mylogit))
1/1.032323
1/1.0325265
data(InsectSprays)
head(InsectSprays)
class(InsectSprays$spray)
mypos <- glm(count ~ spray,family="poisson",data=InsectsSprays)
mypos <- glm(count ~ spray,family="poisson",data=InsectSprays)
summary(mypos)
1/.0558
1-.0558
1-.05588
coef(mypos)
exp(.05)
exp(.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
x[5:10]
x[6:10]
x[6:11]
x[6:12]
x[6:11]
5/4.97
y[6]
5/4.89
mylogit <- glm(useBin ~ wind,family="binomial",data=my_shuttle)
summary(mylogit)
mylogit2 <- glm(1-useBin ~ wind,family="binomial",data=my_shuttle)
summary(mylogit2)
library(swirl)
swirl()
fit <- lm(child ~ parent, data=galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$children)
varChild <- var(galton$Children)
head(glaton)
head(galton)
varChild <- var(galto$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes,varEst)
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gpa_nor~gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
?read.table
file = "\\\\csia2gpl04\\incoming\\agupta\\data\\cheetah_outliers_175m_761w_d5326.bcp"
library(caret)
1:10
range(10)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,p=.5,list=F)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
lm(eruptions ~ waiting,data=trainFaith)
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage,select=c(logwage))
summary(Wage)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
qplot(age,wage,data=Wage)
qplot(age,wage,color=jobclass,data=Wage)
qplot(age,wage,color=education,data=Wage)
qplot(age,wage,color=year,data=Wage)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
head(concrete)
head(mixtures)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
summary(training)
mixtures$index
plot(training$CompressiveStrength)
qplot(seq_along(CompressiveStrength),CompressiveStrength)
qplot(seq_along(CompressiveStrength),CompressiveStrength,data=training)
qplot(seq_along(CompressiveStrength),CompressiveStrength,data=training,color=age)
qplot(seq_along(CompressiveStrength),CompressiveStrength,data=training,color=Age)
qplot(seq_along(CompressiveStrength),CompressiveStrength,data=training,color=FlyAsh)
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
summary(training)
class(training$SuperPlasticizer)
training$SuperPlasticizer
training$Superplasticizer
hist(training$)
hist(training$Superplasticizer)
log(training$Superplasticizer)
testing = adData[-inTrain,]
summary(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
names(training)
col_name = names(training)
col_name[2]
col_names[2][1]
col_name[2][1]
class(col_name[2])
test_str = "Mark"
test_str
test_str[1]
test_str[[1]]
test_str[[1]][1]
test_str[[1]][[1]]
col_name
col_name[58:69]
col_name[57:69]
col_name[58:69]
smallTrain <- training[,58:69]
prComp <- prcomp(smallTrain)
head(prComp)
dim(prComp)
class(prComp)
prComp$rotation
preProc <- preProcess(training[,58:69],method="pca",pcaComp=2)
trainPC <- predict(preProc,training[58:69])
names(adData)
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
summary(modelFit)
testPC <- predict(preProc,testing[58:69])
confusionMatrix(testing$type,predict(modelFit,testPC))
predict(modelFit,testPC)
testing$type
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFit <- train(training$diagnosis ~.,method="glm",preProcess="pca",pcaComp=9,data=training)
warnings()
modelFit <- train(training$diagnosis ~.,method="glm",preProcess="pca",data=training)
modelFit <- train(training$diagnosis ~.,method="glm",preProcess="pca",data=Smalltrain)
smallTrain
modelFit <- train(training$diagnosis ~.,method="glm",preProcess="pca",data=SmallTrain)
modelFit <- train(training$diagnosis ~.,method="glm",preProcess="pca",data=smallTrain)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(training[,58:69],method="pca",pcaComp=9)
trainPC <- predict(preProc,training[58:69])
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training[,58:69],method="pca",pcaComp=11)
trainPC <- predict(preProc,training[58:69])
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training[,58:69],method="pca",pcaComp=11)
preProc
summary(preProc)
?preProcess
preProc <- preProcess(training[,58:69],method="pca",thresh=.8)
preProc
preProc <- preProcess(training[,58:69],method="pca",thresh=.8)
trainPC <- predict(preProc,training[58:69])
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFit <- train(diagnosis~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(training[,58:69],method="pca",thresh=.8)
trainPC <- predict(preProc,training[58:69])
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFit <- train(diagnosis~.,method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$SuperPlasticizer
names(training)
training$Superplasticizer
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(training[,58:69],method="pca",thresh=.8)
preProc
x = 100
x = x/2
x
x = x/2
x
x = x/2
x
x = x/2
x
x = x/2
x
x = x/2
x
2^6
2^7
setwd("~/R/exampleSlidify")
library(slidify)
author("Diamond_Project")
